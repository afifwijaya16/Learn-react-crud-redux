npm install --save bootstrap
npm install --save reactstrap react react-dom

import 'bootstrap/dist/css/bootstrap.min.css'; in index.js

- set component
Navbar
Jumbotron

npm i @fortawesome/react-fontawesome
npm i --save @fortawesome/fontawesome-svg-core
npm i --save @fortawesome/free-solid-svg-icons
npm i --save @fortawesome/react-fontawesome

- table 
npm install react-bootstrap-table-next --save
npm install react-bootstrap-table2-toolkit --save
npm install react-bootstrap-table2-paginator --save

import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'; in index.js

css responsive 
.react-bootstrap-table table {
  table-layout: auto !important;
}

redux 

npm install redux
npm install react-redux
npm install redux-thunk

reducers folder

index.js
import { combineReducers } from "redux";
import users from "./users";

export default combineReducers({
  users,
});

users reducer merupakan bagian dari reducers folder, users digunakan untuk memanggil action dari folder actions

import { GET_USERS_LIST } from "../actions/userAction";

let initialState = {
  title: "FJ",
  getUsersList: false,
  errorUsersList: false,
};
export const users = (state = initialState, action) => {
  switch (action.type) {
    case GET_USERS_LIST:
      return {
        ...state,
        getUsersList: action.payload.data,
        errorUsersList: action.payload.errorMessage,
      };
    default:
      return state;
  }
};
export default users;

actions folder adalah aksi yang akan dilakukan pada reducers
contoh untuk memanggil data
import axios from "axios";

export const GET_USERS_LIST = "GET_USERS_LIST";

export const getUsersList = () => {
  return (dispatch) => {
    axios
      .get(
        "http://my-json-server.typicode.com/afifwijaya16/db-learn-react-crud-redux/users"
      )
      .then(function (response) {
        dispatch({
          type: GET_USERS_LIST,
          payload: {
            data: response.data,
            errorMessage: false,
          },
        });
      })
      .catch(function (error) {
        dispatch({
          type: GET_USERS_LIST,
          payload: {
            data: false,
            errorMessage: error.message,
          },
        });
      });
  };
};

cara membuat fake-api / fake database
buat folder dengan dbjson
lalu buat file di dalam folder dbjson dengan nama db.json 
format json harus sesuai(tidak boleh salah) misal 
{
  "posts": [
    {
      "id": 1,
      "title": "hello"
    }
  ],
  "profile": {
    "name": "typicode"
  }
}
https://my-json-server.typicode.com/
setelah selesai buat github dengan nama bebas/menyesuaikan dengan client
kemudian push pada repository tersebut
setalah selesai maka lakukan pengecekan db.json 
http://my-json-server.typicode.com/afifwijaya16/db-learn-react-crud-redux/users/2


